// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package profile

import (
	context "context"
	common "github.com/Zzocker/book-labs/protos/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserProfileClient is the client API for UserProfile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProfileClient interface {
	CreateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error)
	QueryProfile(ctx context.Context, in *QueryProfileRequest, opts ...grpc.CallOption) (*Profiles, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	DeleteProfile(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error)
	GetProfile(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*Profile, error)
	GetProfilePic(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*common.Image, error)
	CheckCred(ctx context.Context, in *CheckCredRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error)
}

type userProfileClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProfileClient(cc grpc.ClientConnInterface) UserProfileClient {
	return &userProfileClient{cc}
}

func (c *userProfileClient) CreateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error) {
	out := new(common.EmptyRequest)
	err := c.cc.Invoke(ctx, "/profile.UserProfile/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) QueryProfile(ctx context.Context, in *QueryProfileRequest, opts ...grpc.CallOption) (*Profiles, error) {
	out := new(Profiles)
	err := c.cc.Invoke(ctx, "/profile.UserProfile/QueryProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/profile.UserProfile/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) DeleteProfile(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error) {
	out := new(common.EmptyRequest)
	err := c.cc.Invoke(ctx, "/profile.UserProfile/DeleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) GetProfile(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/profile.UserProfile/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) GetProfilePic(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*common.Image, error) {
	out := new(common.Image)
	err := c.cc.Invoke(ctx, "/profile.UserProfile/GetProfilePic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) CheckCred(ctx context.Context, in *CheckCredRequest, opts ...grpc.CallOption) (*common.EmptyRequest, error) {
	out := new(common.EmptyRequest)
	err := c.cc.Invoke(ctx, "/profile.UserProfile/CheckCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProfileServer is the server API for UserProfile service.
// All implementations must embed UnimplementedUserProfileServer
// for forward compatibility
type UserProfileServer interface {
	CreateProfile(context.Context, *UpdateProfileRequest) (*common.EmptyRequest, error)
	QueryProfile(context.Context, *QueryProfileRequest) (*Profiles, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*Profile, error)
	DeleteProfile(context.Context, *UsernameRequest) (*common.EmptyRequest, error)
	GetProfile(context.Context, *UsernameRequest) (*Profile, error)
	GetProfilePic(context.Context, *UsernameRequest) (*common.Image, error)
	CheckCred(context.Context, *CheckCredRequest) (*common.EmptyRequest, error)
	mustEmbedUnimplementedUserProfileServer()
}

// UnimplementedUserProfileServer must be embedded to have forward compatible implementations.
type UnimplementedUserProfileServer struct {
}

func (UnimplementedUserProfileServer) CreateProfile(context.Context, *UpdateProfileRequest) (*common.EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedUserProfileServer) QueryProfile(context.Context, *QueryProfileRequest) (*Profiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProfile not implemented")
}
func (UnimplementedUserProfileServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUserProfileServer) DeleteProfile(context.Context, *UsernameRequest) (*common.EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedUserProfileServer) GetProfile(context.Context, *UsernameRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUserProfileServer) GetProfilePic(context.Context, *UsernameRequest) (*common.Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfilePic not implemented")
}
func (UnimplementedUserProfileServer) CheckCred(context.Context, *CheckCredRequest) (*common.EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCred not implemented")
}
func (UnimplementedUserProfileServer) mustEmbedUnimplementedUserProfileServer() {}

// UnsafeUserProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProfileServer will
// result in compilation errors.
type UnsafeUserProfileServer interface {
	mustEmbedUnimplementedUserProfileServer()
}

func RegisterUserProfileServer(s grpc.ServiceRegistrar, srv UserProfileServer) {
	s.RegisterService(&UserProfile_ServiceDesc, srv)
}

func _UserProfile_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.UserProfile/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).CreateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_QueryProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).QueryProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.UserProfile/QueryProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).QueryProfile(ctx, req.(*QueryProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.UserProfile/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.UserProfile/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).DeleteProfile(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.UserProfile/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).GetProfile(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_GetProfilePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).GetProfilePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.UserProfile/GetProfilePic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).GetProfilePic(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_CheckCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).CheckCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.UserProfile/CheckCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).CheckCred(ctx, req.(*CheckCredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProfile_ServiceDesc is the grpc.ServiceDesc for UserProfile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProfile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.UserProfile",
	HandlerType: (*UserProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _UserProfile_CreateProfile_Handler,
		},
		{
			MethodName: "QueryProfile",
			Handler:    _UserProfile_QueryProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UserProfile_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _UserProfile_DeleteProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UserProfile_GetProfile_Handler,
		},
		{
			MethodName: "GetProfilePic",
			Handler:    _UserProfile_GetProfilePic_Handler,
		},
		{
			MethodName: "CheckCred",
			Handler:    _UserProfile_CheckCred_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile/profile.proto",
}
