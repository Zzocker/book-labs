// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mediafile

import (
	context "context"
	common "github.com/Zzocker/book-labs/protos/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaFileServiceClient is the client API for MediaFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaFileServiceClient interface {
	Upload(ctx context.Context, in *MediaFile, opts ...grpc.CallOption) (*MediaFileID, error)
	Get(ctx context.Context, in *MediaFileID, opts ...grpc.CallOption) (*MediaFile, error)
	Delete(ctx context.Context, in *MediaFileID, opts ...grpc.CallOption) (*common.Empty, error)
}

type mediaFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaFileServiceClient(cc grpc.ClientConnInterface) MediaFileServiceClient {
	return &mediaFileServiceClient{cc}
}

func (c *mediaFileServiceClient) Upload(ctx context.Context, in *MediaFile, opts ...grpc.CallOption) (*MediaFileID, error) {
	out := new(MediaFileID)
	err := c.cc.Invoke(ctx, "/mediafile.MediaFileService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaFileServiceClient) Get(ctx context.Context, in *MediaFileID, opts ...grpc.CallOption) (*MediaFile, error) {
	out := new(MediaFile)
	err := c.cc.Invoke(ctx, "/mediafile.MediaFileService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaFileServiceClient) Delete(ctx context.Context, in *MediaFileID, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/mediafile.MediaFileService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaFileServiceServer is the server API for MediaFileService service.
// All implementations must embed UnimplementedMediaFileServiceServer
// for forward compatibility
type MediaFileServiceServer interface {
	Upload(context.Context, *MediaFile) (*MediaFileID, error)
	Get(context.Context, *MediaFileID) (*MediaFile, error)
	Delete(context.Context, *MediaFileID) (*common.Empty, error)
	mustEmbedUnimplementedMediaFileServiceServer()
}

// UnimplementedMediaFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaFileServiceServer struct {
}

func (UnimplementedMediaFileServiceServer) Upload(context.Context, *MediaFile) (*MediaFileID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMediaFileServiceServer) Get(context.Context, *MediaFileID) (*MediaFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMediaFileServiceServer) Delete(context.Context, *MediaFileID) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMediaFileServiceServer) mustEmbedUnimplementedMediaFileServiceServer() {}

// UnsafeMediaFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaFileServiceServer will
// result in compilation errors.
type UnsafeMediaFileServiceServer interface {
	mustEmbedUnimplementedMediaFileServiceServer()
}

func RegisterMediaFileServiceServer(s grpc.ServiceRegistrar, srv MediaFileServiceServer) {
	s.RegisterService(&MediaFileService_ServiceDesc, srv)
}

func _MediaFileService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaFileServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediafile.MediaFileService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaFileServiceServer).Upload(ctx, req.(*MediaFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaFileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaFileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaFileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediafile.MediaFileService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaFileServiceServer).Get(ctx, req.(*MediaFileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaFileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaFileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaFileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediafile.MediaFileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaFileServiceServer).Delete(ctx, req.(*MediaFileID))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaFileService_ServiceDesc is the grpc.ServiceDesc for MediaFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediafile.MediaFileService",
	HandlerType: (*MediaFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _MediaFileService_Upload_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MediaFileService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MediaFileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediafile/mediafile.proto",
}
