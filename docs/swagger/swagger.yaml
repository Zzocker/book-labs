openapi: 3.0.0
info:
  title: Book Sharing Application
  version: 1.0.0
  contact:
    name: Pritam Singh
    url: https://github.com/Zzocker
    email: pkspritam10@gmail.com
servers:
  - url: http://localhost:9001/api/v1

tags:
  - name: "Auth"
    description: "Generate and manage auth token, required for interacting with the application"
  - name: User-Profile
    description: "APIs related to User's profile"
  - name: Books
    description: "APIs related to Books"
  - name: Comment
    description: "APIs related to comment"
  - name: Order
    description: "APIs related to order"

security:
  - authToken: []

components:
  securitySchemes:
    authToken:
      type: http
      scheme: bearer
  schemas:
    error:
      type: object
      properties:
        code:
          type: integer
          example: 404
        msg:
          type: string
          example: not-found
    # auth
    authToken:
      type: object
      properties:
        id:
          type: string
        expiry:
          type: integer
          example: 1633029862
        issue_time:
          type: integer
          example: 1632754187
        username:
          type: string
          example: Zzocker
    # user-profile
    registerUserReq:
      type: object
      required:
        - username
        - email
        - name
        - password
      properties:
        username:
          type: string
          example: Zzocker
        email:
          type: string
          example: something@gmail.com
        name:
          type: string
          example: First Last Name
        password:
          type: string
          example: pw
        profile_pic:
          type: string
          format: binary
    userProfile:
      type: object
      properties:
        username:
          type: string
          example: Zzocker
        email:
          type: string
          example: something@gmail.com
        name:
          type: string
          example: First Last Name
        profile_pic:
          type: string
          format: binary
    updateUserProfileReq:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        name:
          type: string
        password:
          type: string
        profile_pic:
          type: string
          format: binary
    profilePic:
      type: object
      properties:
        data:
          type: string
          format: base64
          description: base64 encoded image file
    ### books
    createBookReq:
      type: object
      required:
        - name
        - authors
        - isbn
      properties:
        name:
          type: string
          example: "Is God a mathematician?"
        authors:
          type: array
          example: ["Mario Livio"]
          items:
            type: string
        isbn:
          type: string
          example: 978-3-16-148410-0
        front_cover:
          type: string
          format: binary
        back_cover:
          type: string
          format: binary
    book:
      type: object
      properties:
        isbn:
          type: string
          example: 978-3-16-148410-0
        name:
          type: string
          example: "Is God a mathematician?"
        authors:
          type: array
          example: ["Mario Livio"]
          items:
            type: string
        owner:
          type: string
          example: Zzocker
        current_owner:
          type: string
          example: otherUsername
        front_cover:
          type: string
          format: binary
        back_cover:
          type: string
          format: binary
    updateBookReq:
      type: object
      properties:
        name:
          type: string
          example: ""
        authors:
          type: array
          example: []
          items:
            type: string
        front_cover:
          type: string
          format: binary
        back_cover:
          type: string
          format: binary
    bookPic:
      type: object
      properties:
        front:
          type: string
          format: base64
          description: base64 encoded front cover
        back:
          type: string
          format: base64
          description: base64 encoded back cover
    ### comment
    createCommentReq:
      type: object
      required:
        - type
        - parent_id
        - message
      properties:
        type:
          type: string
          enum:
            - ON_BOOK
            - ON_USER
            - ON_COMMENT
        parent_id:
          type: string
          example: 978-3-16-148410-0
          description: "isbn for commenting on book, username for commenting on a user, comment_id for commenting on a comment"
        message:
          type: string
          example: "Nice book"
        media:
          type: array
          items:
            type: string
            format: binary
    comment:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - ON_BOOK
            - ON_USER
            - ON_COMMENT
        parent_id:
          type: string
          example: 978-3-16-148410-0
        message:
          type: string
          example: "Nice book"
        media:
          type: array
          items:
            type: string
            format: binary
    updateCommentReq:
      type: object
      properties:
        message:
          type: string
        media:
          type: array
          items:
            type: string
            format: binary

paths:
  /auth:
    post:
      tags:
        - "Auth"
      description: "Generate token, using username and password to generate"
      summary: "Generate auth token"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: Zzocker
                password:
                  type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: string
    get:
      tags:
        - Auth
      description: "Get Details of token in use"
      summary: Get Details of token in use
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authToken"
    patch:
      tags:
        - Auth
      description: Extend TTL (Time to live) of the token
      summary: Extend TTL (Time to live) of the token
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authToken"
    delete:
      tags:
        - Auth
      description: Delete Auth Token in use
      summary: Delete Auth Token in use
      responses:
        204:
          description: Success

  /user_profile:
    post:
      tags:
        - User-Profile
      security: []
      description: "Register a new user"
      summary: Register a new user
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/registerUserReq"

      responses:
        201:
          description: Success
    get:
      tags:
        - User-Profile
      description: Query users
      summary: Query users
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: First Name
        - name: email
          in: query
          required: false
          schema:
            type: string
            example: something@gmail.com
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/userProfile"

    patch:
      tags:
        - User-Profile
      description: Update User's profile
      summary: Update User's profile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateUserProfileReq"

      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProfile"
    delete:
      tags:
        - User-Profile
      description: Deactivate user profile
      summary: Deactivate user profile
      responses:
        204:
          description: Success

  /user_profile/{username}:
    get:
      tags:
        - User-Profile
      description: Get a user's details
      summary: Get a user's details
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: Zzocker
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProfile"

  /user_profile/pic/{username}:
    get:
      tags:
        - User-Profile
      description: "Get profile picture of an user"
      summary: Get profile picture of an user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: Zzocker
      responses:
        200:
          description: SUCCESS
          content:
            application/json: 
              schema:
                $ref : "#/components/schemas/profilePic"
  /book:
    post:
      tags:
        - Books
      description: "Create a new book"
      summary: "Create a new book"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/createBookReq"
      responses:
        201:
          description: Success
    get:
      tags:
        - Books
      description: Query books
      summary: Query books
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: author
          in: query
          required: false
          schema:
            type: string
        - name: owner
          in: query
          required: false
          schema:
            type: string
        - name: current_owner
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
  /book/{isbn}:
    get:
      tags:
        - Books
      description: "Get a book"
      summary: "Get a book"
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
            example: 978-3-16-148410-0
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"
    patch:
      tags:
        - Books
      description: Update Book details
      summary: Update Book details
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
            example: 978-3-16-148410-0
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateBookReq"

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"
    delete:
      tags:
        - Books
      description: "delete a book"
      summary: "delete a book"
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
            example: 978-3-16-148410-0
      responses:
        204:
          description: Success
  /book/pic/{uuid}:
    get:
      tags:
        - Books
      description: "Get cover picture of a book"
      summary: Get profile picture of a book
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            example: 010554545
      responses:
        200:
          description: SUCCESS
          content:
            application/json: 
              schema:
                $ref : "#/components/schemas/bookPic"
  /comment:
    post:
      tags:
        - Comment
      description: "Create a new comment"
      summary: "Create a new comment"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/createCommentReq"
      responses:
        201:
          description: Success
    get:
      tags:
        - Comment
      description: "Query comment"
      summary: Query comment
      parameters:
        - name: parent_id
          in: query
          required: true
          schema:
            type: string
            example: 978-3-16-148410-0
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - ON_BOOK
              - ON_USER
              - ON_COMMENT
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"
  /comment/{id}:
    get:
      tags:
        - Comment
      description: "Get a comment"
      summary: "Get a comment"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
    patch:
      tags:
        - Comment
      description: "Update a comment"
      summary: "Update a comment"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateCommentReq"

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
    delete:
      tags:
        - Comment
      description: "Delete a comment"
      summary: "Delete a comment"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success